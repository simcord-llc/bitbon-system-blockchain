// Code generated by MockGen. DO NOT EDIT.
// Source: p2p/message.go

// Package quorum is a generated GoMock package.
package quorum

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	p2p "github.com/simcord-llc/bitbon-system-blockchain/p2p"
)

// MockMsgReader is a mock of MsgReader interface.
type MockMsgReader struct {
	ctrl     *gomock.Controller
	recorder *MockMsgReaderMockRecorder
}

// MockMsgReaderMockRecorder is the mock recorder for MockMsgReader.
type MockMsgReaderMockRecorder struct {
	mock *MockMsgReader
}

// NewMockMsgReader creates a new mock instance.
func NewMockMsgReader(ctrl *gomock.Controller) *MockMsgReader {
	mock := &MockMsgReader{ctrl: ctrl}
	mock.recorder = &MockMsgReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMsgReader) EXPECT() *MockMsgReaderMockRecorder {
	return m.recorder
}

// ReadMsg mocks base method.
func (m *MockMsgReader) ReadMsg() (p2p.Msg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMsg")
	ret0, _ := ret[0].(p2p.Msg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMsg indicates an expected call of ReadMsg.
func (mr *MockMsgReaderMockRecorder) ReadMsg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMsg", reflect.TypeOf((*MockMsgReader)(nil).ReadMsg))
}

// MockMsgWriter is a mock of MsgWriter interface.
type MockMsgWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMsgWriterMockRecorder
}

// MockMsgWriterMockRecorder is the mock recorder for MockMsgWriter.
type MockMsgWriterMockRecorder struct {
	mock *MockMsgWriter
}

// NewMockMsgWriter creates a new mock instance.
func NewMockMsgWriter(ctrl *gomock.Controller) *MockMsgWriter {
	mock := &MockMsgWriter{ctrl: ctrl}
	mock.recorder = &MockMsgWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMsgWriter) EXPECT() *MockMsgWriterMockRecorder {
	return m.recorder
}

// WriteMsg mocks base method.
func (m *MockMsgWriter) WriteMsg(arg0 p2p.Msg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMsg indicates an expected call of WriteMsg.
func (mr *MockMsgWriterMockRecorder) WriteMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMsg", reflect.TypeOf((*MockMsgWriter)(nil).WriteMsg), arg0)
}

// MockMsgReadWriter is a mock of MsgReadWriter interface.
type MockMsgReadWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMsgReadWriterMockRecorder
}

// MockMsgReadWriterMockRecorder is the mock recorder for MockMsgReadWriter.
type MockMsgReadWriterMockRecorder struct {
	mock *MockMsgReadWriter
}

// NewMockMsgReadWriter creates a new mock instance.
func NewMockMsgReadWriter(ctrl *gomock.Controller) *MockMsgReadWriter {
	mock := &MockMsgReadWriter{ctrl: ctrl}
	mock.recorder = &MockMsgReadWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMsgReadWriter) EXPECT() *MockMsgReadWriterMockRecorder {
	return m.recorder
}

// ReadMsg mocks base method.
func (m *MockMsgReadWriter) ReadMsg() (p2p.Msg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMsg")
	ret0, _ := ret[0].(p2p.Msg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMsg indicates an expected call of ReadMsg.
func (mr *MockMsgReadWriterMockRecorder) ReadMsg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMsg", reflect.TypeOf((*MockMsgReadWriter)(nil).ReadMsg))
}

// WriteMsg mocks base method.
func (m *MockMsgReadWriter) WriteMsg(arg0 p2p.Msg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMsg indicates an expected call of WriteMsg.
func (mr *MockMsgReadWriterMockRecorder) WriteMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMsg", reflect.TypeOf((*MockMsgReadWriter)(nil).WriteMsg), arg0)
}
